== For v2

* Add -r option to require recipe files that come bundled with Kicker

* Might be best to create an array of Pathname's instead of simply file path strings.
  Probably a subclass of Pathname with some Kicker specific helpers. (relative_path)

* Also maybe add an options/attributes hash to the Pathname subclass onto whch the user
  can add arbitrary attributes for if they spread handing over multiple callbacks.
  But this will make callbacks dependent on each-other...

* Add example .kick files. E.g.:
  * remove files in specific dirs from the files stack (log, tmp etc)
  * rewrites the paths for a specific app dir layout so that the JS tests are properly picked up.

* Add Rails and jstest recipes from our rails app:

    def relative_path(path)
      path[(Dir.pwd.length + 1)..-1]
    end

    # Regular Rails mappings
    Kicker.process_callback = lambda do |kicker, files|
      test_files = []
  
      files.delete_if do |file|
        # Match any ruby test file and run it
        if relative_path(file) =~ /^test\/.+_test\.rb$/
          test_files << relative_path(file)
    
        # Match any file in app/ and map it to a test file
        elsif match = relative_path(file).match(%r{^app/(\w+)([\w/]*)/([\w\.]+)\.\w+$})
          type, namespace, file = match[1..3]
      
          dir = case type
          when "models"
            "unit"
          when "concerns"
            "unit/concerns"
          when "controllers", "views"
            "functional"
          end
      
          if dir
            if type == "views"
              namespace = namespace.split('/')[1..-1]
              file = "#{namespace.pop}_controller"
            end
        
            test_files << File.join("test", dir, namespace, "#{file}_test.rb")
          end
        end
      end
  
      kicker.execute_command "ruby -r #{test_files.join(' -r ')} -e ''" unless test_files.empty?
    end

    # Match javascript changes and run with HeadlessSquirrel
    Kicker.process_callback = lambda do |kicker, files|
      test_files = []
  
      files.delete_if do |file|
        if relative_path(file) =~ %r{^test/javascripts/(\w+_test)\.(js|html)$}
          test_files << "test/javascripts/#{$1}.html"
        end
      end
  
      kicker.execute_command "jstest #{test_files.join(' ')}" unless test_files.empty?
    end

    # Exclude files
    class Kicker
      module Recipes
        module Exclude
          class << self
            def exclusions
              @exclusions ||= []
            end
        
            def exclude(regexp_or_string)
              exclusions << Regexp.new(regexp_or_string)
            end
        
            def call(_, files)
              files.reject! { |f| exclusions.any? { |exclusion| f =~ exclusion } }
            end
          end
      
          Kicker.pre_process_callback = self
        end
      end
    end

    Kicker::Recipes::Exclude.exclude(/\w+\.log/)
    Kicker::Recipes::Exclude.exclude(/\.svn/)

    Kicker::Recipes::Exclude.exclude(File.expand_path('../tmp', __FILE__))